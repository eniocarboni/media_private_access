<?php

/**
 * @file
 * Contains media_private_access hooks.
 */

use Drupal\media_private_access\MediaPrivateAccessControlHandler;
use Drupal\Core\Entity\ContentEntityInterface;

/**
 * Implements hook_entity_type_alter().
 */
function media_private_access_entity_type_alter(array &$entity_types) {
  // Set our custom access handler for media entities.
  if (!empty($entity_types['media'])) {
    $entity_types['media']->setHandlerClass('access', MediaPrivateAccessControlHandler::class);
  }
}

/**
 * Helper to retrieve a key-value list of access modes from config.
 *
 * @return array
 *   An associative array where keys are media type machine names, and values
 *   are the access mode defined for each of them in the settings form.
 *
 * @see \Drupal\media_private_access\Form\MediaPrivateAccessSettingsForm
 */
function media_private_access_get_modes() {
  $modes = \Drupal::config('media_private_access.settings')->get('media_private_access_modes') ?: [];
  $output = [];
  foreach ($modes as $mode) {
    list($key, $value) = explode(":", $mode);
    $output[$key] = $value;
  }
  return $output;
}

/**
 * Helper function to retrieve the entity for the current route.
 *
 * @return \Drupal\Core\Entity\ContentEntityInterface|null
 *   The entity found, if the route belongs to a content entity, or NULL if no
 *   entity could be retrieved.
 */
function media_private_access_get_route_entity() {
  $route_match = \Drupal::routeMatch();
  if (($route = $route_match->getRouteObject()) && ($parameters = $route->getOption('parameters'))) {
    foreach ($parameters as $name => $options) {
      if (isset($options['type']) && strpos($options['type'], 'entity:') === 0) {
        $entity = $route_match->getParameter($name);
        if (($entity instanceof ContentEntityInterface)) {
          return $entity;
        }
      }
    }
  }
  return NULL;
}
